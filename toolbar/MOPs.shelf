<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="MOPs" label="MOPs">
    <memberTool name="MOPS_convert_point_instances"/>
    <memberTool name="MOPS_Disable_Preview"/>
    <memberTool name="MOPS_Update"/>
    <memberTool name="collapse_hdas"/>
    <memberTool name="expand_hdas"/>
    <memberTool name="wiki"/>
    <memberTool name="mops_donate"/>
    <memberTool name="mops_feedback"/>
    <memberTool name="mops_bake_camera"/>
    <memberTool name="get_hardware_id"/>
  </toolshelf>

  <tool name="MOPS_convert_point_instances" label="MOPs to Point Instances" icon="opdef:MOPS::Sop/Instancer::1.1?mops_instancing.svg">
    <helpText><![CDATA[= MOPs to Point Instances = 

"""Converts a MOPs network into Fast Point Instances, for use with other renderers such as Redshift. """

This shelf tool converts one or more SOP networks with MOPs in them into individual object containers for each instance, along with an Instancer object that references them.
The generated <network_name>_MOPS_INSTANCE_RENDER Instance object is the resulting renderable object. The generated object containers are placed inside the subnetwork "MOPS_INSTANCES."

If you modify your instance object paths or indexes, you will likely need to delete the automatically generated MOPS_INSTANCE_RENDER Instance container before using this tool again.]]></helpText>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA["""
1.) get all s@objpath paths
2.) create object container subnet 'INSTANCES'
3.) create object container for each path found
4.) object merge original (absolute) path of each path found into containers
5.) create originalSOP_INSTANCER object container
6.) append extract attributes and output null to original MOP network
6.) object merge output of original MOP network into originalSOP_INSTANCER and delete prims
7.) set s@instance attribute to point to generated containers
"""
import toolutils
import re

prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
scene_viewer = toolutils.sceneViewer()
sel = scene_viewer.selectObjects(prompt)
INSTANCE_DICT = dict()
nodes_to_align = list()

# collect instance paths
for i in sel:
    INSTANCE_DICT[i.path()] = dict()
    INSTANCE_DICT[i.path()]['paths'] = dict()

    out = i.displayNode()
    path_attr = out.geometry().findPointAttrib('objpath')
    if not path_attr:
        hou.ui.displayMessage('SOP node {} does not have "objpath" point attribute!'.format(out.name()),
                              severity=hou.severityType.Error)
        continue
    index_attr = out.geometry().findPointAttrib('mops_index')
    if not index_attr:
        hou.ui.displayMessage('SOP node {} does not have "mops_index" point attribute!'.format(out.name()),
                              severity=hou.severityType.Error)
        continue
    # since i'm shit at iterating over geometry, if there's a material override,
    # let's just promote that to a point attrib so we can do it all at once.
    mat_overrides = False
    temp_promote = None
    if out.geometry().findPrimAttrib('shop_materialpath'):
        mat_overrides = True
        temp_promote = i.createNode('attribpromote')
        temp_promote.setFirstInput(out)
        temp_promote.parm('inclass').set('primitive')
        temp_promote.parm('inname').set('shop_materialpath')
        out = temp_promote

    # now get paths information.
    for pt in out.geometry().iterPoints():
        path = pt.attribValue('objpath')
        index = str(pt.attribValue('mops_index'))
        if path not in INSTANCE_DICT[i.path()]['paths'].keys():
            INSTANCE_DICT[i.path()]['paths'][path] = dict()
            INSTANCE_DICT[i.path()]['paths'][path]['index'] = index
            INSTANCE_DICT[i.path()]['paths'][path]['material'] = None
            if mat_overrides:
                mat = pt.attribValue('shop_materialpath')
                INSTANCE_DICT[i.path()]['paths'][path]['material'] = mat

    if temp_promote:
        temp_promote.destroy()

# print(INSTANCE_DICT)



# generate instance object containers
for network in INSTANCE_DICT:

    # get or build instances container subnet
    instances_container = hou.node('/obj/{}_MOPS_INSTANCES'.format(network.split('/')[-1]))
    if instances_container is None:
        instances_container = hou.node('/obj').createNode('subnet', '{}_MOPS_INSTANCES'.format(network.split('/')[-1]))
        instances_container.setDisplayFlag(False)
    nodes_to_align.append(instances_container)

    for i, v in INSTANCE_DICT[network]['paths'].items():
        # name = i.replace('/', '_')
        name = re.sub('[^\w_ ]', '_', i)
        instanced_node = instances_container.node(name)
        if instanced_node is None:
            instanced_node = instances_container.createNode('geo', name)
            if instanced_node.node('file1') is not None:
                instanced_node.node('file1').destroy()
            load_node = None
            if i.endswith(".abc"):
                load_node = instanced_node.createNode('alembic')
                load_node.parm('fileName').set(i)
            else:
                load_node = instanced_node.createNode('file')
                load_node.parm('file').set(i)
            
            #merge = instanced_node.createNode('object_merge')
            #merge.parm('xformtype').set('local')
            #merge.parm('objpath1').set(i)
            load_node.setRenderFlag(True)
            load_node.setDisplayFlag(True)
            # set material if one exists
            if v['material'] is not None:
                instanced_node.parm('shop_materialpath').set(v['material'])
        # nodes_to_align.append(instanced_node)

for i in sel:
    # append output null to MOPS network(s)
    null = i.node('MOPS_OUT')
    if null is None:
        null = i.createNode('null', 'MOPS_OUT')
        out = i.displayNode()
        null.setFirstInput(out)

    # generate point instancer
    name = '/obj/{}_MOPS_INSTANCE_RENDER'.format(i.name())
    instancer = hou.node(name)
    if instancer is None:
        instancer = hou.node('/obj').createNode('instance', name.split('/')[-1])
        instancer.parm('ptinstance').set('fast')
        instancer.node('add').destroy()
        hou.node('/obj').layoutChildren([instancer])
    nodes_to_align.append(instancer)

    # merge in mops output and convert to points
    merge = instancer.node('merge_in_MOPS')
    if merge is None:
        merge = instancer.createNode('object_merge', 'merge_in_MOPS')
        merge.parm('objpath1').set(null.path())
    extract = instancer.node('extract_attributes')
    if extract is None:
        extract = instancer.createNode('MOPS::Extract_Attributes::1.0', 'extract_attributes')
        extract.setFirstInput(merge)
    add = instancer.node('remove_prims')
    if add is None:
        add = instancer.createNode('add', 'remove_prims')
        add.parm('keep').set(True)
        add.setFirstInput(extract)

    # point wrangle will map original instancer objpath attrs to new instance containers
    setInstance = instancer.node('set_instance_path')
    if setInstance is None:
        setInstance = instancer.createNode('attribwrangle', 'set_instance_path')
        setInstance.setFirstInput(add)
        setInstance.setDisplayFlag(True)
        setInstance.setRenderFlag(True)

    # generate instancing string.
    instances_container = hou.node('/obj/{}_MOPS_INSTANCES'.format(i.name()))
    instance_snippet = ""
    for k, v in INSTANCE_DICT[i.path()]['paths'].items():
        name = re.sub('[^\w_ ]', '_', k)
        container = instances_container.node(name)
        instance_snippet += 'if(i@mops_index == {}) s@instance = "{}";\n'.format(v['index'], container.path())
    setInstance.parm('snippet').set(instance_snippet)

    # cleanup
    instancer.layoutChildren()
    i.setDisplayFlag(False)
    instances_container.layoutChildren()
    hou.node('/obj').layoutChildren(nodes_to_align)]]></script>
  </tool>

  <tool name="MOPS_Update" label="MOPs Updater" icon="opdef:MOPS::Sop/Instancer::1.1?mops_update.svg">
    <helpText><![CDATA[= MOPs Updater = 

""" Automatically download and install any Experimental or Stable release of MOPs. """

This tool uses the Github API to automatically look for newer version of MOPs. You can
select either the Experimental or Stable branches, then use the dropdown to choose which
version you want to install. The most recent version is always the default entry.

Installing an update will overwrite your current MOPs installation.

If you select "Auto-Update houdini.env", the patcher will try to update your houdini.env
file to meet the latest installation standard for MOPs (appending to HOUDINI_PATH rather
than HOUDINI_OTLSCAN_PATH, etc). This is unnecessary if you've already used the current
recommended installation process from README.MD.

If you enable "Share anonymous MOPs data", you will send us completely anonymous metrics
data describing what MOPs nodes you're most frequently using. If you enable this and want to
disable it later, you can edit your houdini.env file and set MOPS_ALLOW_ANALYTICS to 0.]]></helpText>
    <script scriptType="python"><![CDATA[import mops_updater
# launch ui
win = mops_updater.MOPsUpdateWindow(hou.ui.mainQtWindow())]]></script>
  </tool>

  <tool name="MOPS_Disable_Preview" label="Disable Falloff Previews" icon="opdef:MOPS::Sop/Plain_Falloff::1.0?mops_falloff_04.svg">
    <helpText><![CDATA[= Disable Falloff Previews =

""" Disables all falloff previews in the current SOP chain. """

Falloff previews are currently a destructive operation, as they overwrite the MOPs primitives with colored sprites.
This tool disables falloff previews for all nodes in the current SOP hierarchy.]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

# get current location
pane = toolutils.activePane(kwargs)
node = pane.pwd()

# recursively get all child nodes
if node:
    children = node.allSubChildren()
    if children:
        for i in children:
            if i.parm('do_preview') is not None:
                try:
                    i.parm('do_preview').set(0)
                except:
                    pass

]]></script>
  </tool>

  <tool name="collapse_hdas" label="Collapse HDAs" icon="opdef:MOPS::Sop/Instancer::1.1?mops_collapse.svg">
    <helpText><![CDATA[= Collapse HDAs = 

""" Compress the MOPs toolkit into packed format. """

MOPs is distributed as expanded HDAs, meaning they are described in plain text. This makes 
updating code on Github much more straightforward, but it creates a lot of files. This can be
problematic if you're running MOPs on a network server. Running this shelf tool will convert
all MOPs HDAs into packed format, which will make them load much faster over a network connection.
]]></helpText>
    <script scriptType="python"><![CDATA[import mops_tools
import os
import traceback

def do_collapse():
    if hou.getenv('MOPS') is None:
        hou.ui.displayMessage('$MOPS environment variable not found! Aborting.')
        return
        
    hda_path = os.path.join(hou.getenv('MOPS'), 'otls')
    try:
        mops_tools.collapse_hdas(hda_path)
        hou.ui.displayMessage('MOPS HDAs collapsed succesfully!')
    except:
        hou.ui.displayMessage('Error collapsing HDAs: {}'.format(traceback.format_exc()), severity=hou.severityType.Error)
        
do_collapse()]]></script>
  </tool>

  <tool name="expand_hdas" label="Expand HDAs" icon="opdef:MOPS::Sop/Instancer::1.1?mops_expand.svg">
    <helpText><![CDATA[= Expand HDAs =

""" Expand the MOPs HDAs into unpacked (plaintext) format. """

MOPs is distributed as expanded HDAs, meaning they are described in plain text. This makes 
updating code on Github much more straightforward, but it creates a lot of files. This can be
problematic if you're running MOPs on a network server. 

If you've used the Collapse HDAs tool to convert MOPs into packed format and you need to convert back for 
some reason, this shelf tool will expand all MOPs HDAs into their original format.]]></helpText>
    <script scriptType="python"><![CDATA[import mops_tools
import os
import traceback

def do_expand():
    if hou.getenv('MOPS') is None:
        hou.ui.displayMessage('$MOPS environment variable not found! Aborting.')
        return
        
    hda_path = os.path.join(hou.getenv('MOPS'), 'otls')
    try:
        mops_tools.expand_hdas(hda_path)
        hou.ui.displayMessage('MOPS HDAs expanded succesfully!')
    except:
        hou.ui.displayMessage('Error expanding HDAs: {}'.format(traceback.format_exc()), severity=hou.severityType.Error)
        
do_expand()]]></script>
  </tool>

  <tool name="wiki" label="MOPs Wiki" icon="opdef:MOPS::Sop/Instancer::1.1?mops_wiki.svg">
    <helpText><![CDATA[= MOPs Wiki =

""" Open the default web browser to the MOPs Wiki page on Github. """

:note: 
    The MOPs Wiki is a work in progress! For complete documentation on a MOPs node, use the Help function in Houdini.
    
The MOPs Wiki on Github is a high-level overview of the MOPs installation process, overall design and concepts,
and a quick primer on most of the nodes. It's not meant to be a replacement for the documentation embedded in
each HDA's Help section. Use it as a reference when looking for a specific effect you're trying to create.

This button opens the default web browser and points it to the wiki homepage.]]></helpText>
    <script scriptType="python"><![CDATA[import webbrowser
url = 'https://github.com/toadstorm/MOPS/wiki'
webbrowser.open(url)]]></script>
  </tool>

  <tool name="mops_donate" label="Donate" icon="opdef:MOPS::Sop/Instancer::1.1?mops_donate.svg">
    <helpText><![CDATA[= Donate to MOPs = 

""" Open the default browser to the MOPs donation page. """

The core MOPs tools are and will always be free and open source. While we may eventually release paid add-ons
to MOPs, they will only exist as a complement to the core tools, not a replacement.

Please consider donating to our cause, because we don't get paid to do this and we need to pay for our hosting!]]></helpText>
    <script scriptType="python"><![CDATA[import webbrowser
url = 'https://www.paypal.com/donate/?hosted_button_id=N8GYTQF7FXSJW'
webbrowser.open(url)]]></script>
  </tool>

  <tool name="mops_feedback" label="Share Feedback" icon="opdef:MOPS::Sop/Instancer::1.1?mops_feedback.svg">
    <helpText><![CDATA[= Share Feedback = 

""" Open a web browser to display our contact form. """

We really value feedback, questions, concerns, or just general opinions about MOPs. While
we would encourage you to visit [our forums|https://forum.motionoperators.com] to post bug 
reports or questions that could help other people, if you'd like to contact us privately,
we have a handy form to fill out. You can also email us at [info@motionoperators.com|mailto:info@motionoperators.com].

Thanks for using MOPs!
Moritz and Henry]]></helpText>
    <script scriptType="python"><![CDATA[import webbrowser
url = 'https://www.motionoperators.com/contact'

webbrowser.open(url)]]></script>
  </tool>

  <tool name="mops_bake_camera" label="Bake Camera" icon="opdef:MOPS::Sop/Instancer::1.5?bread.svg">
    <script scriptType="python"><![CDATA[import mops_tools
import toolutils

prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
scene_viewer = toolutils.sceneViewer()
selection = scene_viewer.selectObjects(prompt)

if selection:
    cam = selection[0]
    mops_tools.bake_camera(cam)]]></script>
  </tool>

  <tool name="get_hardware_id" label="Get Hardware ID" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import platform
import subprocess
import os
import hou

def get_machine_id():
    if platform.system() == "Windows":
        try:
            import _winreg
        except ImportError:
            import winreg as _winreg
        registry = _winreg.HKEY_LOCAL_MACHINE
        address = 'SOFTWARE\\Microsoft\\Cryptography'
        keyargs = _winreg.KEY_READ | _winreg.KEY_WOW64_64KEY
        key = _winreg.OpenKey(registry, address, 0, keyargs)
        value = _winreg.QueryValueEx(key, 'MachineGuid')
        _winreg.CloseKey(key)
        unique = value[0]
        return unique
    elif platform.system() == "Linux":
        p = subprocess.Popen(['cat', '/var/lib/dbus/machine-id'], stdout=subprocess.PIPE)
        out, err = p.communicate()
        machine_id = out
        return machine_id
    elif platform.system() == "Darwin":
        import re
        p = subprocess.Popen(['ifconfig', '-m', 'en0'], stdout=subprocess.PIPE)
        out, err = p.communicate()
        if sys.version_info[0] > 2:
            out = out.decode("utf-8", "ignore")
        eth = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", out)
        eth_str = eth.group(0)
        return eth_str
        
id = get_machine_id()
# hou.ui.displayMessage("Your hardware ID is: \n{}".format(id))
hou.ui.readInput("Your hardware ID is:", initial_contents=id)]]></script>
  </tool>
</shelfDocument>
